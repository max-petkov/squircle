{"mappings":"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","sources":["packages/figma-squircle/src/index.ts","packages/figma-squircle/src/distribute.ts","packages/figma-squircle/src/draw.ts"],"sourcesContent":["import { distributeAndNormalize } from './distribute'\nimport { getPathParamsForCorner, getSVGPathFromPathParams } from './draw'\n\nexport interface FigmaSquircleParams {\n  cornerRadius?: number\n  topLeftCornerRadius?: number\n  topRightCornerRadius?: number\n  bottomRightCornerRadius?: number\n  bottomLeftCornerRadius?: number\n  cornerSmoothing: number\n  width: number\n  height: number\n  preserveSmoothing?: boolean\n}\n\nexport function getSvgPath({\n  cornerRadius = 0,\n  topLeftCornerRadius,\n  topRightCornerRadius,\n  bottomRightCornerRadius,\n  bottomLeftCornerRadius,\n  cornerSmoothing,\n  width,\n  height,\n  preserveSmoothing = false,\n}: FigmaSquircleParams) {\n  topLeftCornerRadius = topLeftCornerRadius ?? cornerRadius\n  topRightCornerRadius = topRightCornerRadius ?? cornerRadius\n  bottomLeftCornerRadius = bottomLeftCornerRadius ?? cornerRadius\n  bottomRightCornerRadius = bottomRightCornerRadius ?? cornerRadius\n\n  if (\n    topLeftCornerRadius === topRightCornerRadius &&\n    topRightCornerRadius === bottomRightCornerRadius &&\n    bottomRightCornerRadius === bottomLeftCornerRadius &&\n    bottomLeftCornerRadius === topLeftCornerRadius\n  ) {\n    const roundingAndSmoothingBudget = Math.min(width, height) / 2\n    const cornerRadius = Math.min(\n      topLeftCornerRadius,\n      roundingAndSmoothingBudget\n    )\n\n    const pathParams = getPathParamsForCorner({\n      cornerRadius,\n      cornerSmoothing,\n      preserveSmoothing,\n      roundingAndSmoothingBudget,\n    })\n\n    return getSVGPathFromPathParams({\n      width,\n      height,\n      topLeftPathParams: pathParams,\n      topRightPathParams: pathParams,\n      bottomLeftPathParams: pathParams,\n      bottomRightPathParams: pathParams,\n    })\n  }\n\n  const { topLeft, topRight, bottomLeft, bottomRight } = distributeAndNormalize(\n    {\n      topLeftCornerRadius,\n      topRightCornerRadius,\n      bottomRightCornerRadius,\n      bottomLeftCornerRadius,\n      width,\n      height,\n    }\n  )\n\n  return getSVGPathFromPathParams({\n    width,\n    height,\n    topLeftPathParams: getPathParamsForCorner({\n      cornerSmoothing,\n      preserveSmoothing,\n      cornerRadius: topLeft.radius,\n      roundingAndSmoothingBudget: topLeft.roundingAndSmoothingBudget,\n    }),\n    topRightPathParams: getPathParamsForCorner({\n      cornerSmoothing,\n      preserveSmoothing,\n      cornerRadius: topRight.radius,\n      roundingAndSmoothingBudget: topRight.roundingAndSmoothingBudget,\n    }),\n    bottomRightPathParams: getPathParamsForCorner({\n      cornerSmoothing,\n      preserveSmoothing,\n      cornerRadius: bottomRight.radius,\n      roundingAndSmoothingBudget: bottomRight.roundingAndSmoothingBudget,\n    }),\n    bottomLeftPathParams: getPathParamsForCorner({\n      cornerSmoothing,\n      preserveSmoothing,\n      cornerRadius: bottomLeft.radius,\n      roundingAndSmoothingBudget: bottomLeft.roundingAndSmoothingBudget,\n    }),\n  })\n}\n","interface RoundedRectangle {\n  topLeftCornerRadius: number\n  topRightCornerRadius: number\n  bottomRightCornerRadius: number\n  bottomLeftCornerRadius: number\n  width: number\n  height: number\n}\n\ninterface NormalizedCorner {\n  radius: number\n  roundingAndSmoothingBudget: number\n}\n\ninterface NormalizedCorners {\n  topLeft: NormalizedCorner\n  topRight: NormalizedCorner\n  bottomLeft: NormalizedCorner\n  bottomRight: NormalizedCorner\n}\n\ntype Corner = keyof NormalizedCorners\n\ntype Side = 'top' | 'left' | 'right' | 'bottom'\n\ninterface Adjacent {\n  side: Side\n  corner: Corner\n}\n\nexport function distributeAndNormalize({\n  topLeftCornerRadius,\n  topRightCornerRadius,\n  bottomRightCornerRadius,\n  bottomLeftCornerRadius,\n  width,\n  height,\n}: RoundedRectangle): NormalizedCorners {\n  const roundingAndSmoothingBudgetMap: Record<Corner, number> = {\n    topLeft: -1,\n    topRight: -1,\n    bottomLeft: -1,\n    bottomRight: -1,\n  }\n\n  const cornerRadiusMap: Record<Corner, number> = {\n    topLeft: topLeftCornerRadius,\n    topRight: topRightCornerRadius,\n    bottomLeft: bottomLeftCornerRadius,\n    bottomRight: bottomRightCornerRadius,\n  }\n\n  Object.entries(cornerRadiusMap)\n    // Let the bigger corners choose first\n    .sort(([, radius1], [, radius2]) => {\n      return radius2 - radius1\n    })\n    .forEach(([cornerName, radius]) => {\n      const corner = cornerName as Corner\n      const adjacents = adjacentsByCorner[corner]\n\n      // Look at the 2 adjacent sides, figure out how much space we can have on both sides,\n      // then take the smaller one\n      const budget = Math.min.apply(\n        null,\n        adjacents.map((adjacent) => {\n          const adjacentCornerRadius = cornerRadiusMap[adjacent.corner]\n          if (radius === 0 && adjacentCornerRadius === 0) {\n            return 0\n          }\n\n          const adjacentCornerBudget =\n            roundingAndSmoothingBudgetMap[adjacent.corner]\n\n          const sideLength =\n            adjacent.side === 'top' || adjacent.side === 'bottom'\n              ? width\n              : height\n\n          // If the adjacent corner's already given the rounding and smoothing budget,\n          // we'll just take the rest\n          if (adjacentCornerBudget >= 0) {\n            return sideLength - roundingAndSmoothingBudgetMap[adjacent.corner]\n          } else {\n            return (radius / (radius + adjacentCornerRadius)) * sideLength\n          }\n        })\n      )\n\n      roundingAndSmoothingBudgetMap[corner] = budget\n      cornerRadiusMap[corner] = Math.min(radius, budget)\n    })\n\n  return {\n    topLeft: {\n      radius: cornerRadiusMap.topLeft,\n      roundingAndSmoothingBudget: roundingAndSmoothingBudgetMap.topLeft,\n    },\n    topRight: {\n      radius: cornerRadiusMap.topRight,\n      roundingAndSmoothingBudget: roundingAndSmoothingBudgetMap.topRight,\n    },\n    bottomLeft: {\n      radius: cornerRadiusMap.bottomLeft,\n      roundingAndSmoothingBudget: roundingAndSmoothingBudgetMap.bottomLeft,\n    },\n    bottomRight: {\n      radius: cornerRadiusMap.bottomRight,\n      roundingAndSmoothingBudget: roundingAndSmoothingBudgetMap.bottomRight,\n    },\n  }\n}\n\nconst adjacentsByCorner: Record<Corner, Array<Adjacent>> = {\n  topLeft: [\n    {\n      corner: 'topRight',\n      side: 'top',\n    },\n    {\n      corner: 'bottomLeft',\n      side: 'left',\n    },\n  ],\n  topRight: [\n    {\n      corner: 'topLeft',\n      side: 'top',\n    },\n    {\n      corner: 'bottomRight',\n      side: 'right',\n    },\n  ],\n  bottomLeft: [\n    {\n      corner: 'bottomRight',\n      side: 'bottom',\n    },\n    {\n      corner: 'topLeft',\n      side: 'left',\n    },\n  ],\n  bottomRight: [\n    {\n      corner: 'bottomLeft',\n      side: 'bottom',\n    },\n    {\n      corner: 'topRight',\n      side: 'right',\n    },\n  ],\n}\n","interface CornerPathParams {\n  a: number\n  b: number\n  c: number\n  d: number\n  p: number\n  cornerRadius: number\n  arcSectionLength: number\n}\n\ninterface CornerParams {\n  cornerRadius: number\n  cornerSmoothing: number\n  preserveSmoothing: boolean\n  roundingAndSmoothingBudget: number\n}\n\n// The article from figma's blog\n// https://www.figma.com/blog/desperately-seeking-squircles/\n//\n// The original code by MartinRGB\n// https://github.com/MartinRGB/Figma_Squircles_Approximation/blob/bf29714aab58c54329f3ca130ffa16d39a2ff08c/js/rounded-corners.js#L64\nexport function getPathParamsForCorner({\n  cornerRadius,\n  cornerSmoothing,\n  preserveSmoothing,\n  roundingAndSmoothingBudget,\n}: CornerParams): CornerPathParams {\n  // From figure 12.2 in the article\n  // p = (1 + cornerSmoothing) * q\n  // in this case q = R because theta = 90deg\n  let p = (1 + cornerSmoothing) * cornerRadius\n\n  // When there's not enough space left (p > roundingAndSmoothingBudget), there are 2 options:\n  //\n  // 1. What figma's currently doing: limit the smoothing value to make sure p <= roundingAndSmoothingBudget\n  // But what this means is that at some point when cornerRadius is large enough,\n  // increasing the smoothing value wouldn't do anything\n  //\n  // 2. Keep the original smoothing value and use it to calculate the bezier curve normally,\n  // then adjust the control points to achieve similar curvature profile\n  //\n  // preserveSmoothing is a new option I added\n  //\n  // If preserveSmoothing is on then we'll just keep using the original smoothing value\n  // and adjust the bezier curve later\n  if (!preserveSmoothing) {\n    const maxCornerSmoothing = roundingAndSmoothingBudget / cornerRadius - 1\n    cornerSmoothing = Math.min(cornerSmoothing, maxCornerSmoothing)\n    p = Math.min(p, roundingAndSmoothingBudget)\n  }\n\n  // In a normal rounded rectangle (cornerSmoothing = 0), this is 90\n  // The larger the smoothing, the smaller the arc\n  const arcMeasure = 90 * (1 - cornerSmoothing)\n  const arcSectionLength =\n    Math.sin(toRadians(arcMeasure / 2)) * cornerRadius * Math.sqrt(2)\n\n  // In the article this is the distance between 2 control points: P3 and P4\n  const angleAlpha = (90 - arcMeasure) / 2\n  const p3ToP4Distance = cornerRadius * Math.tan(toRadians(angleAlpha / 2))\n\n  // a, b, c and d are from figure 11.1 in the article\n  const angleBeta = 45 * cornerSmoothing\n  const c = p3ToP4Distance * Math.cos(toRadians(angleBeta))\n  const d = c * Math.tan(toRadians(angleBeta))\n\n  let b = (p - arcSectionLength - c - d) / 3\n  let a = 2 * b\n\n  // Adjust the P1 and P2 control points if there's not enough space left\n  if (preserveSmoothing && p > roundingAndSmoothingBudget) {\n    const p1ToP3MaxDistance =\n      roundingAndSmoothingBudget - d - arcSectionLength - c\n\n    // Try to maintain some distance between P1 and P2 so the curve wouldn't look weird\n    const minA = p1ToP3MaxDistance / 6\n    const maxB = p1ToP3MaxDistance - minA\n\n    b = Math.min(b, maxB)\n    a = p1ToP3MaxDistance - b\n    p = Math.min(p, roundingAndSmoothingBudget)\n  }\n\n  return {\n    a,\n    b,\n    c,\n    d,\n    p,\n    arcSectionLength,\n    cornerRadius,\n  }\n}\n\ninterface SVGPathInput {\n  width: number\n  height: number\n  topRightPathParams: CornerPathParams\n  bottomRightPathParams: CornerPathParams\n  bottomLeftPathParams: CornerPathParams\n  topLeftPathParams: CornerPathParams\n}\n\nexport function getSVGPathFromPathParams({\n  width,\n  height,\n  topLeftPathParams,\n  topRightPathParams,\n  bottomLeftPathParams,\n  bottomRightPathParams,\n}: SVGPathInput) {\n  return `\n    M ${width - topRightPathParams.p} 0\n    ${drawTopRightPath(topRightPathParams)}\n    L ${width} ${height - bottomRightPathParams.p}\n    ${drawBottomRightPath(bottomRightPathParams)}\n    L ${bottomLeftPathParams.p} ${height}\n    ${drawBottomLeftPath(bottomLeftPathParams)}\n    L 0 ${topLeftPathParams.p}\n    ${drawTopLeftPath(topLeftPathParams)}\n    Z\n  `\n    .replace(/[\\t\\s\\n]+/g, ' ')\n    .trim()\n}\n\nfunction drawTopRightPath({\n  cornerRadius,\n  a,\n  b,\n  c,\n  d,\n  p,\n  arcSectionLength,\n}: CornerPathParams) {\n  if (cornerRadius) {\n    return `\n    c ${a} 0 ${a + b} 0 ${a + b + c} ${d}\n    a ${cornerRadius} ${cornerRadius} 0 0 1 ${arcSectionLength} ${arcSectionLength}\n    c ${d} ${c}\n        ${d} ${b + c}\n        ${d} ${a + b + c}`\n  } else {\n    return `l ${p} 0`\n  }\n}\n\nfunction drawBottomRightPath({\n  cornerRadius,\n  a,\n  b,\n  c,\n  d,\n  p,\n  arcSectionLength,\n}: CornerPathParams) {\n  if (cornerRadius) {\n    return `\n    c 0 ${a}\n      0 ${a + b}\n      ${-d} ${a + b + c}\n    a ${cornerRadius} ${cornerRadius} 0 0 1 -${arcSectionLength} ${arcSectionLength}\n    c ${-c} ${d}\n      ${-(b + c)} ${d}\n      ${-(a + b + c)} ${d}`\n  } else {\n    return `l 0 ${p}`\n  }\n}\n\nfunction drawBottomLeftPath({\n  cornerRadius,\n  a,\n  b,\n  c,\n  d,\n  p,\n  arcSectionLength,\n}: CornerPathParams) {\n  if (cornerRadius) {\n    return `\n    c ${-a} 0\n      ${-(a + b)} 0\n      ${-(a + b + c)} ${-d}\n    a ${cornerRadius} ${cornerRadius} 0 0 1 -${arcSectionLength} -${arcSectionLength}\n    c ${-d} ${-c}\n      ${-d} ${-(b + c)}\n      ${-d} ${-(a + b + c)}`\n  } else {\n    return `l ${-p} 0`\n  }\n}\n\nfunction drawTopLeftPath({\n  cornerRadius,\n  a,\n  b,\n  c,\n  d,\n  p,\n  arcSectionLength,\n}: CornerPathParams) {\n  if (cornerRadius) {\n    return `\n    c 0 ${-a}\n      0 ${-(a + b)}\n      ${d} ${-(a + b + c)}\n    a ${cornerRadius} ${cornerRadius} 0 0 1 ${arcSectionLength} -${arcSectionLength}\n    c ${c} ${-d}\n      ${b + c} ${-d}\n      ${a + b + c} ${-d}`\n  } else {\n    return `l 0 ${-p}`\n  }\n}\n\nfunction toRadians(degrees: number) {\n  return (degrees * Math.PI) / 180\n}\n"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../../../"}